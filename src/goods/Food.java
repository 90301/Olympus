package goods;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

import topLevel.NodeMain;

/**
 * Holds a food object, which is generated by a farm or some sort of other
 * production.
 * @author inhaler
 *
 */
public class Food implements good {
	
	//the id for the food, or BASE_FOOD_ID if a base food.
	private String id;
	private String staticId;
	public static final String BASE_FOOD_ID = "Base Food"; 
	public static final int EXPIRED_FOOD_VALUE = -10;
	//the name of the food
	private String foodName;
	/*static list of all base foods. this can be used in food generation/creation
	 * when a new food is created, it must be added to this list
	*/
	public static ConcurrentMap<String,Food> baseFoods = new ConcurrentHashMap<String,Food>();
	
	private int quantity;
	/*
	 * Food stats
	 */
	private int nutritionValue;
	private int tasteValue;
	private int timeLeft;
	private int volume;
	private int mass;
	
	public static void createBaseFood(Food f) {
		f.staticId = NodeMain.genID();
		baseFoods.putIfAbsent(f.foodName, f);
		good.addBaseGood(f);
	}
	
	
	public Food() {
		
	}
	/**
	 * generates food
	 * calls generate.
	 * Sets Quantity to 1
	 * @param f the food to generate from
	 */
	public void generateFromFood(Food f) {
		this.foodName = f.foodName;
		this.nutritionValue = f.nutritionValue;
		this.tasteValue = f.tasteValue;
		this.volume = f.volume;
		this.mass = f.mass;
		this.timeLeft = f.timeLeft;
		this.staticId = f.staticId;
		this.quantity = 1;
		this.generate();
	}
	@Override
	public void generateFrom(good g) {
		this.generateFromFood(((Food) g));
	};
	
	@Override
	public int getMass() {
		return mass;
	}

	@Override
	public int getVolume() {
		return volume;
	}

	@Override
	public int assessValue() {
		//TODO: add assess value function
		return 0;
	}

	@Override
	public void simulateStep() {
		this.timeLeft--;
		
		if (timeLeft <0) {
			this.tasteValue = EXPIRED_FOOD_VALUE;
			this.nutritionValue = EXPIRED_FOOD_VALUE;
		}
		
	}

	@Override
	public String getId() {
		return id;
	}

	@Override
	public void generate() {
		this.setId(NodeMain.genID());
		
	}

	public String getFoodName() {
		return foodName;
	}

	public void setFoodName(String foodName) {
		this.foodName = foodName;
	}

	public int getNutritionValue() {
		return nutritionValue;
	}

	public void setNutritionValue(int nutritionValue) {
		this.nutritionValue = nutritionValue;
	}

	public int getTasteValue() {
		return tasteValue;
	}

	public void setTasteValue(int tasteValue) {
		this.tasteValue = tasteValue;
	}

	@Override
	public void setGoodStats(int volume, int mass) {
		this.volume = volume;
		this.mass = mass;
	}

	public int getTimeLeft() {
		return timeLeft;
	}

	public void setTimeLeft(int timeLeft) {
		this.timeLeft = timeLeft;
	}
	
	

	public void setId(String id) {
		this.id = id;
	}

	@Override
	public int getGoodType() {
		return good.GOOD_TYPE_FOOD;
	}


	@Override
	public int getQuantity() {
		return this.quantity;
	}


	@Override
	public int addQuantity(int quantity) {
		this.quantity += quantity;
		return this.quantity;
	}


	@Override
	public int removeQuantity(int quantity) {
		this.quantity -= quantity;
		return this.quantity;
	}


	@Override
	public String getStaticId() {
		// TODO Auto-generated method stub
		return staticId;
	}


	@Override
	public void setQuantity(int quantity) {
		this.quantity = quantity;
		
	}
	/*
public String toString() {
		return "Food: " + this.foodName +" Nurtition: " + nutritionValue + " Taste: " + tasteValue + goodStatToString() + " id: " + this.id;
	}
	*/


	@Override
	public String toString() {
		return "Food [id=" + id + ", staticId=" + staticId + ", foodName=" + foodName + ", quantity=" + quantity
				+ ", nutritionValue=" + nutritionValue + ", tasteValue=" + tasteValue + ", timeLeft=" + timeLeft
				+ ", volume=" + volume + ", mass=" + mass + "]";
	}
	


}
